commom:
  docker_compose:
    version: '3.7'
    networks:
      dockernet:
        name: ${APP_NAME}
    services:
      api:
        build:
          context: .
          target: build
          args:
            buildcmd: npm run build
        command: npm run start:debug
        container_name: ${APP_NAME}
        environment:
          - 'NODE_ENV=${NODE_ENV}'
        image: ${APP_NAME}:latest
        init: true
        networks:
          - dockernet
        ports:
          - '${APP_PORT}:3000'
          - '${APP_PORT_DEBUG}:9229'
        volumes:
          - .:/usr/src/app
          - /usr/src/app/node_modules
  env_file:
    NODE_ENV:
      value: development
    TZ:
      value: America/Sao_Paulo
    APP_NAME:
      comment: APPLICATION
      lineSeparator: true
      value: null
    APP_PORT:
      value: null
    APP_PORT_DEBUG:
      comment: Must be equal to debug port configured in ".vscode/launch.json"
      value: null
    SWAGGER_PATH:
      value: swagger
    LOGGER_DIRNAME:
      comment: LOGGER
      lineCommented: true
      lineSeparator: true
      value: .
    LOGGER_FILENAME:
      lineCommented: true
      value: ${APP_NAME}.log
    LOGGER_LEVEL:
      value: debug
    LOGGER_PRETTY_PRINT:
      value: true
    LOGGER_REQUESTS:
      value: true
  npm:
    install:
      - '@nestjs/config'
      - '@nestjs/mapped-types'
      - '@nestjs/platform-fastify'
      - '@nestjs/swagger'
      - 'class-transformer'
      - 'class-validator'
      - 'cls-rtracer'
      - 'fast-redact'
      - 'fastify-helmet'
      - 'fastify-multipart'
      - 'fastify-swagger'
      - 'hexoid'
      - 'pino'
      - 'request-ip'
    install_dev:
      - '@trivago/prettier-plugin-sort-imports'
      - '@types/fast-redact'
      - '@types/pino'
      - 'eslint-config-airbnb-typescript@^12.0.0'
      - 'eslint-plugin-import'
      - 'eslint-plugin-unused-imports'
      - 'pino-pretty'
      - 'rimraf'
    uninstall:
      - '@nestjs/platform-express'
      - '@types/express'
      - '@types/supertest'
      - 'rimraf'
      - 'supertest'

jwt:
  npm:
    install:
      - '@nestjs/jwt'
      - '@nestjs/passport'
      - 'passport'
      - 'passport-jwt'
    install_dev:
      - '@types/passport-jwt'
  env_file:
    JWT_SECRET:
      comment: JWT
      lineSeparator: true
      value: secret
    JWT_EXPIRES_IN:
      value: 86400
redis:
  docker_compose:
    services:
      redis:
        container_name: ${APP_NAME}-redis
        image: redis:alpine
        networks:
          - dockernet
  npm:
    install:
      - 'ioredis'
    install_dev:
      - '@types/ioredis'
  env_file:
    REDIS_CONFIGURATION:
      comment: REDIS
      lineSeparator: true
      value: ''
      valueIfContainer: '{"host":"${APP_NAME}-redis"}'
email:
  docker_compose:
    services:
      smtp4dev:
        container_name: ${APP_NAME}-smtp4dev
        image: rnwood/smtp4dev:v3
        networks:
          - dockernet
        ports:
          - '${SMTP4DEV_WEB_INTERFACE_PORT}:80'
  npm:
    install:
      - 'nodemailer'
    install_dev:
      - '@types/nodemailer'
  env_file:
    EMAIL_CONFIGURATION:
      comment: EMAIL
      lineSeparator: true
      value: ''
      valueIfContainer: '{"host":"${APP_NAME}-smtp4dev","port":25}'
    SMTP4DEV_WEB_INTERFACE_PORT:
      hideIfNull: true
      value: null
      valueIfContainer: 5000
prometheus:
  docker_compose:
    services:
      prometheus:
        container_name: ${APP_NAME}-prometheus
        image: prom/prometheus
        networks:
          - dockernet
        ports:
          - '${PROMETHEUS_WEB_INTERFACE_PORT}:9090'
        volumes:
          - ./prometheus:/etc/prometheus
      grafana:
        container_name: ${APP_NAME}-grafana
        image: grafana/grafana
        environment:
          - GF_AUTH_DISABLE_LOGIN_FORM=true
          - GF_AUTH_ANONYMOUS_ENABLED=true
          - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        networks:
          - dockernet
        ports:
          - '${GRAFANA_WEB_INTERFACE_PORT}:3000'
        volumes:
          - ./grafana/provisioning:/etc/grafana/provisioning
          - ./grafana/dashboards/:/var/lib/grafana/dashboards
  npm:
    install:
      - '@willsoto/nestjs-prometheus'
      - 'prom-client'
  env_file:
    METRICS_PATH:
      comment: PROMETHEUS
      lineSeparator: true
      value: metrics
    METRICS_DEFAULT_ENABLED:
      comment: https://github.com/siimon/prom-client#default-metrics
      value: true
    METRICS_DEFAULT_CONFIG:
      value: 'null'
    METRICS_value:
      value: '{"enabled":${METRICS_DEFAULT_ENABLED},"config":${METRICS_DEFAULT_CONFIG}}'
    METRICS_HEAP_SIZE_LIMIT_ENABLED:
      comment: file://./src/core/metrics/interfaces/heap-size-limit-metrics-options.d.ts
      value: true
    METRICS_HEAP_SIZE_LIMIT_OPTIONS:
      value: 'null'
    METRICS_HEAP_SIZE_LIMIT:
      value: '{"enabled":${METRICS_HEAP_SIZE_LIMIT_ENABLED},"options":${METRICS_HEAP_SIZE_LIMIT_OPTIONS}}'
    METRICS_HTTP_ENABLED:
      comment: file://./src/core/metrics/interfaces/http-metrics-options.interface.d.ts
      value: true
    METRICS_HTTP_OPTIONS:
      value: '{"ignorePaths":["/${SWAGGER_PATH}","/${METRICS_PATH}"]}'
    METRICS_HTTP:
      value: '{"enabled":${METRICS_HTTP_ENABLED},"options":${METRICS_HTTP_OPTIONS}}'
    PROMETHEUS_WEB_INTERFACE_PORT:
      hideIfNull: true
      value: null
      valueIfContainer: 9090
    GRAFANA_WEB_INTERFACE_PORT:
      hideIfNull: true
      value: null
      valueIfContainer: 3000

database:
  mongodb:
    docker:
      dockerfile: 'Dockerfile'
      compose:
        volumes:
          dockervolume:
            name: ${APP_NAME}-db
        services:
          db:
            container_name: ${APP_NAME}-db
            image: mongo:latest
            environment:
              - MONGO_INITDB_ROOT_USERNAME=${DB_USER}
              - MONGO_INITDB_ROOT_PASSWORD=${DB_PSWD}
            networks:
              - dockernet
            ports:
              - '${DB_CLIENT_PORT}:27017'
            volumes:
              - dockervolume:/data/db
    npm:
      install:
        - '@nestjs/mongoose'
        - 'mongoose'
    env_file:
      DB_SCHEME:
        comment: DATABASE
        lineSeparator: true
        value: ''
        valueIfContainer: mongodb
      DB_HOST:
        value: ''
        valueIfContainer: ${APP_NAME}-db
      DB_PORT:
        value: 27017
      DB_USER:
        value: ''
        valueIfContainer: admin
      DB_PSWD:
        value: ''
        valueIfContainer: admin123
      DB_NAME:
        value: ''
        valueIfContainer: ${APP_NAME}
      DB_OPTIONS:
        value: ''
        valueIfContainer: '?authSource=admin'
      DB_URI:
        value: ${DB_SCHEME}://${DB_USER}:${DB_PSWD}@${DB_HOST}:${DB_PORT}/${DB_NAME}${DB_OPTIONS}
      DB_CONFIGURATION:
        value: '{"uri":"${DB_URI}"}'
      DB_CLIENT_PORT:
        hideIfNull: true
        value: null
        valueIfContainer: 27017
  mssql:
    docker:
      dockerfile: 'Dockerfile'
      compose:
        volumes:
          dockervolume:
            name: ${APP_NAME}-db
        services:
          db:
            container_name: ${APP_NAME}-db
            image: mcr.microsoft.com/mssql/server:latest
            environment:
              - ACCEPT_EULA=Y
              - SA_PASSWORD=${DB_PSWD}
            networks:
              - dockernet
            ports:
              - '${DB_CLIENT_PORT}:1433'
            volumes:
              - dockervolume:/var/opt/mssql
    npm:
      install:
        - '@nestjs/typeorm'
        - 'mssql'
        - 'typeorm'
    env_file:
      DB_TYPE:
        comment: DATABASE
        lineSeparator: true
        value: mssql
      DB_HOST:
        value: ''
        valueIfContainer: ${APP_NAME}-db
      DB_PORT:
        value: 1433
      DB_NAME:
        value: ''
        valueIfContainer: master
      DB_USER:
        value: ''
        valueIfContainer: sa
      DB_PSWD:
        value: ''
        valueIfContainer: Admin@123
      DB_SCHEMA:
        value: ''
        valueIfContainer: dbo
      DB_SYNCHRONIZE:
        value: false
      DB_MAX_QUERY_EXECUTION_TIME:
        value: 3000
      DB_EXTRA:
        value: 'null'
      DB_OPTIONS:
        value: 'null'
        valueIfContainer: '{"trustServerCertificate":true}'
      DB_CONFIGURATION:
        value: '{"type":"${DB_TYPE}","host":"${DB_HOST}","port":${DB_PORT},"database":"${DB_NAME}","schema":"${DB_SCHEMA}","username":"${DB_USER}","password":"${DB_PSWD}","synchronize":${DB_SYNCHRONIZE},"maxQueryExecutionTime":${DB_MAX_QUERY_EXECUTION_TIME},"extra":${DB_EXTRA},"options":${DB_OPTIONS}}'
      DB_CLIENT_PORT:
        hideIfNull: true
        value: null
        valueIfContainer: 1433
  oracle:
    docker:
      dockerfile: 'Dockerfile.oracle'
    npm:
      install:
        - '@nestjs/typeorm'
        - 'oracledb'
        - 'typeorm'
    env_file:
      DB_TYPE:
        comment: DATABASE
        lineSeparator: true
        value: oracle
      DB_HOST:
        value: ''
      DB_PORT:
        value: 1521
      DB_NAME:
        value: ''
      DB_USER:
        value: ''
      DB_PSWD:
        value: ''
      DB_SCHEMA:
        value: ''
      DB_SYNCHRONIZE:
        value: false
      DB_MAX_QUERY_EXECUTION_TIME:
        value: 3000
      DB_EXTRA:
        value: 'null'
      DB_CONFIGURATION:
        value: '{"type":"${DB_TYPE}","host":"${DB_HOST}","port":${DB_PORT},"database":"${DB_NAME}","schema":"${DB_SCHEMA}","username":"${DB_USER}","password":"${DB_PSWD}","synchronize":${DB_SYNCHRONIZE},"maxQueryExecutionTime":${DB_MAX_QUERY_EXECUTION_TIME},"extra":${DB_EXTRA}}'
  other:
    docker:
      dockerfile: 'Dockerfile'
    npm:
      install:
        - '@nestjs/typeorm'
        - 'typeorm'
    env_file:
      DB_TYPE:
        comment: DATABASE
        lineSeparator: true
        value: ''
      DB_HOST:
        value: ''
      DB_PORT:
        value: ''
      DB_NAME:
        value: ''
      DB_USER:
        value: ''
      DB_PSWD:
        value: ''
      DB_SCHEMA:
        value: ''
      DB_SYNCHRONIZE:
        value: false
      DB_MAX_QUERY_EXECUTION_TIME:
        value: 3000
      DB_EXTRA:
        value: 'null'
      DB_CONFIGURATION:
        value: '{"type":"${DB_TYPE}","host":"${DB_HOST}","port":${DB_PORT},"database":"${DB_NAME}","schema":"${DB_SCHEMA}","username":"${DB_USER}","password":"${DB_PSWD}","synchronize":${DB_SYNCHRONIZE},"maxQueryExecutionTime":${DB_MAX_QUERY_EXECUTION_TIME},"extra":${DB_EXTRA}}'
  postgres:
    docker:
      dockerfile: 'Dockerfile'
      compose:
        volumes:
          dockervolume:
            name: ${APP_NAME}-db
        services:
          db:
            container_name: ${APP_NAME}-db
            image: postgres:alpine
            environment:
              - POSTGRES_USER=${DB_USER}
              - POSTGRES_PASSWORD=${DB_PSWD}
              - POSTGRES_DB=${APP_NAME}
              - PGDATA=/var/lib/postgresql/data/pgdata
            networks:
              - dockernet
            ports:
              - '${DB_CLIENT_PORT}:5432'
            volumes:
              - dockervolume:/var/lib/postgresql/data
    npm:
      install:
        - '@nestjs/typeorm'
        - 'pg'
        - 'typeorm'
    env_file:
      DB_TYPE:
        comment: DATABASE
        lineSeparator: true
        value: postgres
      DB_HOST:
        value: ''
        valueIfContainer: ${APP_NAME}-db
      DB_PORT:
        value: 5432
      DB_NAME:
        value: ''
        valueIfContainer: ${APP_NAME}
      DB_USER:
        value: ''
        valueIfContainer: admin
      DB_PSWD:
        value: ''
        valueIfContainer: Admin@123
      DB_SCHEMA:
        value: ''
        valueIfContainer: public
      DB_SYNCHRONIZE:
        value: false
      DB_MAX_QUERY_EXECUTION_TIME:
        value: 3000
      DB_EXTRA:
        value: 'null'
      DB_CONFIGURATION:
        value: '{"type":"${DB_TYPE}","host":"${DB_HOST}","port":${DB_PORT},"database":"${DB_NAME}","schema":"${DB_SCHEMA}","username":"${DB_USER}","password":"${DB_PSWD}","synchronize":${DB_SYNCHRONIZE},"maxQueryExecutionTime":${DB_MAX_QUERY_EXECUTION_TIME},"extra":${DB_EXTRA}}'
      DB_CLIENT_PORT:
        hideIfNull: true
        value: null
        valueIfContainer: 5432
    
tmpdir_prefix: 'pncc' # Easter Egg ^_^